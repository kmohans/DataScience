plotly::plot_ly(hf[1:10000,],x=~ArrTime,y=~DepTime,type="scatter",mode="markers")
plotly::plot_ly(hf[1:10000,],x=~ArrTime,y=~DepTime,col=~UniqueCarrier,type="scatter",mode="markers")
plotly::plot_ly(hf[1:10000,],x=~ArrTime,y=~DepTime,col=~UniqueCarrier,mode="markers")
plotly::plot_ly(hf[1:10000,],x=~ArrTime,y=~DepTime,color = ~UniqueCarrier,type="scatter",mode="markers")
a <- hf[1:10000,] %>%
filter(Dest %in% c("LAX","SEA","JFK","SAN")) %>%
ggplot(aes(ArrTime,DepTime,col=UniqueCarrier)) +
geom_point(position = "jitter",alpha=0.2) +
facet_grid(Origin~Dest)
plotly::ggplotly(a)
data(""storms"")
data("storms")
names(storms)
ggplot(storms,aes(hu_diameter,ts_diameter))+geom_point()
ggplot(storms,aes(hu_diameter,ts_diameter,cool=wind))+geom_point()
ggplot(storms,aes(hu_diameter,ts_diameter,col=wind))+geom_point()
ggplot(storms,aes(hu_diameter,ts_diameter,col=category))+geom_point()
ggplot(storms,aes(hu_diameter,ts_diameter,col=category))+geom_point()+
stat_smooth(method="lm")
ggplot(storms,aes(hu_diameter,ts_diameter,col=category))+geom_point()+
stat_smooth(method="loess")
hf_dt[,.(mn = mean(.N),sm = sum(ArrDelay+DepDelay,na.rm=T)),by=.(UniqueCarrier,Dest)]
a<- ggplot(hf[1:10000,],aes(ArrDelay,fill=UniqueCarrier))+
geom_histogram(bins=10) + coord_cartesian(xlim=c(-70,200))
library(dplyr)
library(ggplot2)
a<- ggplot(hf[1:10000,],aes(ArrDelay,fill=UniqueCarrier))+
geom_histogram(bins=10) + coord_cartesian(xlim=c(-70,200))
a$data
a<- ggplot(hf[1:10000,],aes(ArrDelay,fill=UniqueCarrier))+
geom_histogram(bins=10) + coord_cartesian(xlim=c(-70,200))+theme(axis.line.x = element_line(colour = "red"))
a
a<- ggplot(hf[1:10000,],aes(ArrDelay,fill=UniqueCarrier))+
geom_histogram(bins=10) +
coord_cartesian(xlim=c(-70,200))+
theme(axis.line.x = element_blank())
a
a<- ggplot(hf[1:10000,],aes(ArrDelay,fill=UniqueCarrier))+
geom_histogram(bins=10) +
coord_cartesian(xlim=c(-70,200))+
theme(axis.line.x = element_blank(),axis.ticks.x = element_blank())
a
a<- ggplot(hf[1:10000,],aes(ArrDelay,fill=UniqueCarrier))+
geom_histogram(bins=10) +
coord_cartesian(xlim=c(-70,200))+
theme_gray()
a
a<- ggplot(hf[1:10000,],aes(ArrDelay,fill=UniqueCarrier))+
geom_histogram(bins=10) +
coord_cartesian(xlim=c(-70,200))+
theme_bw()
a
my_theme <- function(x){
axis.title.x = element_blank()
}
a<- ggplot(hf[1:10000,],aes(ArrDelay,fill=UniqueCarrier))+
geom_histogram(bins=10) +
coord_cartesian(xlim=c(-70,200))+
my_theme()
a
library("data.table")
hf_dt <- data.table(hf)
class(hf_dt)
hf %>% group_by(UniqueCarrier) %>%
summarise(count = n())
hf_dt[,.N,by=UniqueCarrier]
microbenchmark::microbenchmark(dpl = hf %>% group_by(UniqueCarrier) %>%
summarise(count = n())
,
dt =hf_dt[,.N,by=UniqueCarrier]
,time=100,unit = "s"  )
hf_dt[,c(.SD,.N),by=UniqueCarrier,.SDcols=TailNum]
hf_dt[,c(.SD,.N),by=UniqueCarrier,.SDcols=.(TailNum)]
hf_dt[,c(.SD,.N),.SDcols=.(TailNum),by=UniqueCarrier,]
hf_dt[,c(.SD,.N),.SDcols=(TailNum)]
names(hf_DT)
names(hf_dt)
hf_dt[,lapply(.SD,.N),.SDcols=(TailNum)]
hf_dt[,lapply(.SD,mean,na.rm=T),.SDcols=.(ArrDelay)]
hf_dt[,lapply(.SD,mean,na.rm=T),.SDcols=("ArrDelay")]
hf_dt[,lapply(.SD,mean,na.rm=T),.SDcols=.("ArrDelay","DepDelay")]
hf_dt[,lapply(.SD,mean,na.rm=T),.SDcols=("ArrDelay","DepDelay")]
hf_dt[UniqueCarrier=="CO",lapply(.SD,mean,na.rm=T),.SDcols=("ArrDelay")]
hf_dt [,mn:=ArrDelay+DepDelay]
hf_dt [,mn:=ArrDelay+DepDelay][order(mn)]
hf_dt [,mn:=ArrDelay+DepDelay][order(-mn)]
viol <- read.delim("C:/Users/JPA System/Downloads/CommViolPredUnnormalizedData.txt",delim=",",header=T)
viol <- read.delim("C:/Users/JPA System/Downloads/CommViolPredUnnormalizedData.txt",sep=",",header=T)
write.csv(viol,"C:/Users/JPA System/Downloads/CrimeData.csv")
hp <- read.delim("C:/Users/JPA System/Downloads/houseprices.csv",sep=",",header=T)
head(hp)
mod <- lm(Price~Living.Area,data=hp)
summary(mod)
anova(mod)
aov(mod)
pred <- predict(mod,newdata=hp)
install.packages("Metrics")
head(pred)
Metrics::rmse(hp$Price,pred)
Metrics::mae(hp$Price,pred)
mod <- lm(Price~.,data=hp)
pred <- predict(mod,newdata=hp)
Metrics::rmse(hp$Price,pred)
summary(mod)
logit <- glm(Target~.,data=dev[1:1000,],family = "binomial",method="class")
### Step1 Log likelihood ratio
lmtest::lrtest(logit)
logit <- glm(Target~.,data=dev[1:1000,],family = "binomial",method="class")
dev <- read.csv("C:/Users/JPA System/Downloads/DEV_SAMPLE.csv")
logit <- glm(Target~.,data=dev[1:1000,],family = "binomial",method="class")
logit <- glm(factor(Target)~.,data=dev[1:1000,],family = "binomial",method="class")
mean(dev[1:1000]$Target==1)
mean(dev$Target[1:1000]==1)
logit <- glm(factor(Target)~.,data=dev[1:1000,],family = "binomial")
### Step1 Log likelihood ratio
lmtest::lrtest(logit)
### Step2 Evaluate McFadden Value
pscl::pR2(logit)
### Step3 Explore the summary table
summary(logit)
logit <- glm(factor(Target)~.,data=dev[1:1000,-1],family = "binomial")
### Step1 Log likelihood ratio
lmtest::lrtest(logit)
### Step2 Evaluate McFadden Value
pscl::pR2(logit)
### Step3 Explore the summary table
summary(logit)
logit <- glm(factor(Target)~.,data=dev[1:1000,-1],family = "binomial")
### Step1 Log likelihood ratio
lmtest::lrtest(logit)
### Step2 Evaluate McFadden Value
pscl::pR2(logit)
### Step3 Explore the summary table
summary(logit)
### Step4 Odds Exponential
exp(coef(logit))
### Step4 Odds Exponential
(a<-exp(coef(logit)))
### P-value
a["Balance"]
### P-value
a["Balance"]/(a["Balance"]+1)
### Step5 Predict and balance threshold
p1 <- predict(logit,newdata=dev[1:1000,-1],type="class")
### Step5 Predict and balance threshold
p1 <- predict(logit,newdata=dev[1:1000,-1],type="response")
g1 <- floor(p1+0.5)
table(Actual=dev[1:1000,-1],Predicted = g1)
g1 <- floor(p1+0.5)
g1
table([1:1000,-1],g1)
table(Actual=dev$Target[1:1000,-1],Predicted = g1)
table(Actual=dev$Target[1:1000],Predicted = g1)
lapply(hf,is.numeric)
sapply(hf,mean)
colMeans(is.na(hf))
colSums(is.na(hf))
summary(hf)
sapply(hf,mean)
sapply(hf,mean,na.rm=T)
View(sapply(hf,mean,na.rm=T))
hf[,"UniqueCarrier"]<- factor(hf[,"UniqueCarrier"])
hf[,c(7,19:21)]<- lapply(hf[,c(7,19:21)],factor)
library(dplyr)
select(hf,contains("car","tax"))
select(hf,contains("car"))
head(select(hf,contains("car")))
head(select(hf,contains("tax")))
head(select(hf,contains("car"),ends_with("in")))
head(filter(hf,DepDelay > 0))
head(filter(hf,Cancelled == 1))
summarise(hf,mean_del = mean(ArrDelay+DepDelay,na.rm=T))
summarise(hf,mean_del = mean(ArrDelay+DepDelay,na.rm=T),count = n(),
dist_carr n_distinct(UniqueCarrier))
summarise(hf,mean_del = mean(ArrDelay+DepDelay,na.rm=T),count = n(),
dist_carr n_distinct(UniqueCarrier))
summarise(hf,mean_del = mean(ArrDelay+DepDelay,na.rm=T),count = n(),dist_carr n_distinct(UniqueCarrier)))
summarise(hf,mean_del = mean(ArrDelay+DepDelay,na.rm=T),
con = n(),dist_carr= n_distinct(UniqueCarrier)))
summarise(hf,mean_del = mean(ArrDelay+DepDelay,na.rm=T),
con = n(),dist_carr= n_distinct(UniqueCarrier))
temp<-summarise(hf,mean_del = mean(ArrDelay+DepDelay,na.rm=T),
con = n(),dist_carr= n_distinct(UniqueCarrier))
temp
names(hf)
hf <- mutate(hf, TotalDelay = ArrDelay+DepDelay)
names(hf)
head(hf)
hflights <- mutate(hf, TotalDelay = ArrDelay+DepDelay)
hf %>% mutate(TotalTaxi = TaxiIn+TaxiOut) %>%
summarise(AvgTaxi = mean(TotalTaxi,na.rm=T))
hf <- mutate(hf,TotalTaxi = TaxiIn+TaxiOut)
summarise(hf,AvgTaxi = mean(TotalTaxi,na.rm=T))
hf <- mutate(hf,TotalTaxi = TaxiIn+TaxiOut)
a <- select(hf,contains("tax"))
a <- mutate(a,TotalTaxi = TaxiIn+TaxiOut)
summarise(a,AvgTaxi = mean(TotalTaxi,na.rm=T))
a <- select(hf,contains("tax"),contains("Del")
)
a <- filter(a,TotalDelay > 0)
hf %>%  select(contains("tax"),contains("Del")) %>%
filter(TotalDelay>0) %>% summarise(del = mean(TotalDelay),tax = mean(TotalTaxi))
library(ggplot2)
hf %>%  select(contains("tax"),contains("Del")) %>%
filter(TotalDelay>0) %>% summarise(del = mean(TotalDelay),tax = mean(TotalTaxi)) %>%
ggplot(aes(del,tax)) + geom_bar(stat="identity")
hf %>%  select(contains("tax"),contains("Del")) %>%
filter(TotalDelay>0) %>% group_by(UniqueCarrier) %>% summarise(del = mean(TotalDelay),tax = mean(TotalTaxi))
hf %>%  select(contains("tax"),contains("Del"),contains("un")) %>%
filter(TotalDelay>0) %>% group_by(UniqueCarrier) %>% summarise(del = mean(TotalDelay),tax = mean(TotalTaxi)) %>%
ggplot(aes(del,tax)) + geom_bar(stat="identity")
hf %>%  select(contains("tax"),contains("Del"),contains("un")) %>%
filter(TotalDelay>0) %>% group_by(UniqueCarrier) %>% summarise(del = mean(TotalDelay),tax = mean(TotalTaxi))
hf %>%  select(contains("tax"),contains("Del"),contains("un")) %>%
filter(TotalDelay>0) %>% group_by(UniqueCarrier) %>% summarise(del = mean(TotalDelay),tax = mean(TotalTaxi)) %>%
ggplot(aes(UniqueCarrier,tax)) + geom_bar(stat="identity")
library(data.table)
hf.dt <- data.table(hflights)
hf.dt[,TotalTaxi := TaxiIn+TaxiOut]
hf.dt[TotalDelay>0,.(del = mean(TotalDelay),tax = mean(TotalTaxi))]
microbenchmark::microbenchmark(df =hf %>%  select(contains("tax"),contains("Del"),contains("un")) %>%
filter(TotalDelay>0) %>% group_by(UniqueCarrier) %>% summarise(del = mean(TotalDelay),tax = mean(TotalTaxi)),
dt = hf.dt[TotalDelay>0,.(del = mean(TotalDelay),tax = mean(TotalTaxi)),by=UniqueCarrier],unit="s",times = 100)
hf.dt[,TotalTaxi := TaxiIn+TaxiOut][TotalDelay>0,.(del = mean(TotalDelay),tax = mean(TotalTaxi)),by=UniqueCarrier]
hf.dt[,TotalTaxi := TaxiIn+TaxiOut]
[TotalDelay>0,.(del = mean(TotalDelay),tax = mean(TotalTaxi)),by=UniqueCarrier]
hf.dt[,.N,by=UniqueCarrier]
hf.dt[,lapply(mean,.SD),by=UniqueCarrier,.SDcols=c("TotalTaxi","TotalDelay")]
hf.dt[,lapply(.SD,mean),by=UniqueCarrier,.SDcols=c("TotalTaxi","TotalDelay")]
hf.dt[,lapply(.SD,mean,na.rm=T),by=UniqueCarrier,.SDcols=c("TotalTaxi","TotalDelay")]
names(hf.dt)
hf.dt[,lapply(.SD,mean,na.rm=T),
by=Month,.SDcols=c("TotalTaxi","TotalDelay")]
object.size(hf)
object.size(hf.dt)
class(hf.dt)
microbenchmark::microbenchmark(df =hf %>%  select(contains("tax"),contains("Del"),contains("un")) %>%
filter(TotalDelay>0) %>% group_by(UniqueCarrier) %>% summarise(del = mean(TotalDelay),tax = mean(TotalTaxi)),
dt = hf.dt[TotalDelay>0,.(del = mean(TotalDelay),tax = mean(TotalTaxi)),by=UniqueCarrier],unit="s",times = 100)
hf.dt <- data.table(hflights)
library(data.table)
hf.dt <- data.table(hflights)
hf.dt[TotalDelay>0,.(del = mean(TotalDelay),tax = mean(TotalTaxi))]
hf.dt[,TotalTaxi := TaxiIn+TaxiOut][TotalDelay>0,.(del = mean(TotalDelay),tax = mean(TotalTaxi)),by=UniqueCarrier]
hf.dt[TotalDelay>0,.(del = mean(TotalDelay),tax = mean(TotalTaxi))]
microbenchmark::microbenchmark(df =hf %>%  select(contains("tax"),contains("Del"),contains("un")) %>%
filter(TotalDelay>0) %>% group_by(UniqueCarrier) %>% summarise(del = mean(TotalDelay),tax = mean(TotalTaxi)),
dt = hf.dt[TotalDelay>0,.(del = mean(TotalDelay),tax = mean(TotalTaxi)),by=UniqueCarrier],unit="s",times = 100)
library(dplyr)
hf.dt[TotalDelay>0,.(del = mean(TotalDelay),tax = mean(TotalTaxi))]
microbenchmark::microbenchmark(df =hf %>%  select(contains("tax"),contains("Del"),contains("un")) %>%
filter(TotalDelay>0) %>% group_by(UniqueCarrier) %>% summarise(del = mean(TotalDelay),tax = mean(TotalTaxi)),
dt = hf.dt[TotalDelay>0,.(del = mean(TotalDelay),tax = mean(TotalTaxi)),by=UniqueCarrier],unit="s",times = 100)
head(hf.dt)
View(hf.dt)
write.csv(file="hflights.csv",hf.dt)
getwd()
source('~/.active-rstudio-document', echo=TRUE)
## DT
hf.dt[,.N,by=Origin]
hf.dt <- data.table(hflights)
#### Q2
hf %>% filter(Cancelled == 1) %>%
group_by(CancellationCode) %>%
summarise(count = n())
hf.dt[Cancelled==1,.N,by=CancellationCode]
#### Q2
hf %>% filter(Cancelled == 1) %>%
group_by(CancellationCode) %>%
summarise(count = n())
hf.dt[Cancelled==1,.N,by=CancellationCode]
hf.dt[Cancelled==1,lapply(.SD,mean.na.rm=T),by=CancellationCode,.SDcols=c("TaxiIn","TaxiOut"))]
hf.dt[Cancelled==1,lapply(.SD,mean.na.rm=T),by=CancellationCode,.SDcols=c("TaxiIn","TaxiOut")]
hf.dt[Cancelled==1,lapply(.SD,mean,na.rm=T),by=CancellationCode,.SDcols=c("TaxiIn","TaxiOut")]
hf.dt[Cancelled==1,lapply(.SD,sum,na.rm=T),by=CancellationCode,.SDcols=c("TaxiIn","TaxiOut")]
hf.temp <- fread("hflights.csv")
class(hf.temp)
#### Q3
hf %>% filter(Month==9, DayofMonth==c(10,11,12))
#### Q3
hf %>% filter(Month==9, DayofMonth==c(10,11,12)) %>%
group_by(Origin,Dest) %>%  summarise(count = n())
#### Q3
hf %>% filter(Month==9, DayofMonth==c(10,11,12)) %>%
group_by(DayofMonth,Dest) %>%  summarise(count = n())
#### Q3
hf %>% filter(Month==9, DayofMonth==c(10,11,12)) %>%
group_by(DayofMonth,Dest) %>%  summarise(count = n()) %>% spread(Dest,count)
library(tidyr) ### Spread and Gather function
#### Q3
hf %>% filter(Month==9, DayofMonth==c(10,11,12)) %>%
group_by(DayofMonth,Dest) %>%  summarise(count = n()) %>% spread(Dest,count)
#### Q3
temp <- hf %>% filter(Month==9, DayofMonth==c(10,11,12)) %>%
group_by(DayofMonth,Dest) %>%  summarise(count = n()) %>% spread(Dest,count)
View(temp)
View(temp)
# DT
hf.dt[Month==9 & DayofMonth==c(10,11,12),.N,by=.(Dest,DayofMonth)]
hf.dt[,.N,by=Origin]
hf.dt[,.N,by=Origin][order(N)]
hf.dt[,.N,by=Origin][order(-N)]
hf.dt[,order(.N),by=Origin]
hf.dt[,.N,by=Origin][1:10,order(-N)]
hf.dt[,.N,by=Origin][order(-N)]
hf.dt[,.N,by=Origin][order(-N)][1]
hf.d[,.(Score = mean(Cancelled==1)),by=.(UniqueCarrier,Dest)]
hf.dt[,.(Score = mean(Cancelled==1)),by=.(UniqueCarrier,Dest)]
hf.dt[,.((Score = mean(Cancelled==1)*100)),by=.(UniqueCarrier,Dest)]
hf.dt[,.(Ratio = (Score = mean(Cancelled==1)*100)),by=.(UniqueCarrier,Dest)]
hf.dt[,.(Ratio% = (Score = mean(Cancelled==1)*100)),by=.(UniqueCarrier,Dest)]
hf.dt[,.(RatioPercentage = (Score = mean(Cancelled==1)*100)),by=.(UniqueCarrier,Dest)]
hf.dt[,.(RatioPercentage = (Score = mean(Cancelled==1)*100)),by=.(UniqueCarrier,Dest)] %>%
spread(Dest,RatioPercentage)
a <- hf.dt[,.(RatioPercentage = (Score = mean(Cancelled==1)*100)),by=.(UniqueCarrier,Dest)] %>%
spread(Dest,RatioPercentage)
View(a)
write.csv(a,"temp.csv")
hf.dt[,.(RatioPercentage = (Score = mean(Cancelled==1)*100)),by=.(UniqueCarrier,Dest)]
hf.dt[,(lapply(.SD,sum),by="tailNum"]
hf.dt[,lapply(.SD,sum),by="tailNum"]
hf.dt[,lapply(.SD,sum),by="TailNum"]
names(hf.dt)
hf.dt[,lapply(.SD,sum),by="FlightNum"]
hf.dt[,lapply(.SD,sum),by="FlightNum",.SDcols="ActualElapsedTime"]
hf.dt[,lapply(.SD,sum,na.rm=T),by="FlightNum",.SDcols="ActualElapsedTime"]
hf.dt[,lapply(.SD,sum,na.rm=T),by=.(FlightNum,UniqueCarrier),.SDcols="ActualElapsedTime"]
hf.dt[,c(lapply(.SD,sum,na.rm=T),sum(Cancelled==1)),by=.(FlightNum),.SDcols="ActualElapsedTime"]
hf.dt[,.(c(lapply(.SD,sum,na.rm=T),CountCancelled = sum(Cancelled==1))),by=.(FlightNum),.SDcols="ActualElapsedTime"]
hf.dt[,.(c(lapply(.SD,sum,na.rm=T),sum(Cancelled==1))),by=.(FlightNum),.SDcols="ActualElapsedTime"]
hf.dt[,.(c(lapply(.SD,sum,na.rm=T),sum(Cancelled==1))),by=.(FlightNum),.SDcols="ActualElapsedTime"]
hf.dt[,(c(lapply(.SD,sum,na.rm=T),sum(Cancelled==1))),by=.(FlightNum),.SDcols="ActualElapsedTime"]
hf.dt[,(c(lapply(.SD,sum,na.rm=T),sum(Cancelled==1))),by=.(FlightNum),.SDcols="ActualElapsedTime"][order(desc(V1))]
hf.dt[,(c(lapply(.SD,sum,na.rm=T),sum(Cancelled==1))),by=.(FlightNum),.SDcols="ActualElapsedTime"][order(V1)]
names(hf.dt[,(c(lapply(.SD,sum,na.rm=T),sum(Cancelled==1))),by=.(FlightNum),.SDcols="ActualElapsedTime"])[order(V1)]
names(hf.dt[,(c(lapply(.SD,sum,na.rm=T),sum(Cancelled==1))),by=.(FlightNum),.SDcols="ActualElapsedTime"])
hf.dt[,(c(lapply(.SD,sum,na.rm=T),sum(Cancelled==1))),by=.(FlightNum),.SDcols="ActualElapsedTime"][order("")]
hf.dt[,(c(lapply(.SD,sum,na.rm=T),sum(Cancelled==1))),by=.(FlightNum),.SDcols="ActualElapsedTime"]
hf.dt[,(c(lapply(.SD,sum,na.rm=T),CC=sum(Cancelled==1))),by=.(FlightNum),.SDcols="ActualElapsedTime"]
hf.dt[,(c(lapply(.SD,sum,na.rm=T),CC=sum(Cancelled==1))),by=.(FlightNum),.SDcols="ActualElapsedTime"][order(-CC)]
hf.dt[,(c(lapply(.SD,sum,na.rm=T),
CC=sum(Cancelled==1))),by=.(FlightNum),
.SDcols="ActualElapsedTime"][order(desc(CC))]
hf.dt[,(c(lapply(.SD,sum,na.rm=T),
CC=sum(Cancelled==1))),by=.(FlightNum),
.SDcols="ActualElapsedTime"][order(desc(CC),ActualElapsedTime)]
hf.dt[,(c(lapply(.SD,sum,na.rm=T),
CC=sum(Cancelled==1))),by=.(FlightNum),
.SDcols="ActualElapsedTime"][order(desc(CC),
ActualElapsedTime)]
a<-hf.dt[,(c(lapply(.SD,sum,na.rm=T),
CC=sum(Cancelled==1))),by=.(FlightNum),
.SDcols="ActualElapsedTime"][order(desc(CC),
ActualElapsedTime)]
setkey(a,CC)
a[CC>0]
a[CC>0][order(-CC)]
a<-hf.dt[,(c(lapply(.SD,sum,na.rm=T),
CC=sum(Cancelled==1))),by=.(FlightNum),
.SDcols="ActualElapsedTime"][order(desc(CC),
ActualElapsedTime)][CC>0]
hf.dt[,(c(lapply(.SD,sum,na.rm=T),
CC=sum(Cancelled==1))),by=.(FlightNum),
.SDcols="ActualElapsedTime"][order(desc(CC),
ActualElapsedTime)][CC>0]
key(hf.dt)
hf.dt[,(c(lapply(.SD,sum,na.rm=T),
CC=sum(Cancelled==1))),by=.(FlightNum),
.SDcols="ActualElapsedTime"][order(desc(CC),
ActualElapsedTime)][CC>0]
hf.dt[,(c(lapply(.SD,sum,na.rm=T),
CC=sum(Cancelled==1)),hf.dt[Cancelled==1,sum(ActualElapsedTime)]),by=.(FlightNum),
.SDcols="ActualElapsedTime"][order(desc(CC),
ActualElapsedTime)][CC>0]
hf.dt[,(c(lapply(.SD,sum,na.rm=T),
CC=sum(Cancelled==1),hf.dt[Cancelled==1,sum(ActualElapsedTime)])),by=.(FlightNum),
.SDcols="ActualElapsedTime"][order(desc(CC),
ActualElapsedTime)][CC>0]
hf.dt[,(c(lapply(.SD,sum,na.rm=T),
CC=sum(Cancelled==1),hf.dt[Cancelled==1,laaply(.SD,sum,na.rm=T),.SDcols="ActualElapsedTime"])),by=.(FlightNum),
.SDcols="ActualElapsedTime"][order(desc(CC),
ActualElapsedTime)][CC>0]
hf.dt[,(c(lapply(.SD,sum,na.rm=T),
CC=sum(Cancelled==1),hf.dt[Cancelled==1,lapply(.SD,sum,na.rm=T),.SDcols="ActualElapsedTime"])),by=.(FlightNum),
.SDcols="ActualElapsedTime"][order(desc(CC),
ActualElapsedTime)][CC>0]
hf.dt[,(c(lapply(.SD,sum,na.rm=T),
CC=sum(Cancelled==1),CanTime=hf.dt[Cancelled==1,lapply(.SD,sum,na.rm=T),.SDcols="ActualElapsedTime"])),by=.(FlightNum),
.SDcols="ActualElapsedTime"][order(desc(CC),
ActualElapsedTime)][CC>0]
hf.dt[,(c(lapply(.SD,sum,na.rm=T),
CC=sum(Cancelled==1),CanTime=hf.dt[Cancelled==1,
lapply(.SD,sum,na.rm=T),
.SDcols="ActualElapsedTime"])),
by=.(FlightNum),
.SDcols=.(ActualElapsedTime,TaxiIn)][order(desc(CC),
ActualElapsedTime)][CC>0]
hf.dt[,(c(lapply(.SD,sum,na.rm=T),
CC=sum(Cancelled==1),CanTime=hf.dt[Cancelled==1,
lapply(.SD,sum,na.rm=T),
.SDcols="ActualElapsedTime"])),
by=.(FlightNum),
.SDcols=c("ActualElapsedTime","TaxiIn")][order(desc(CC),
ActualElapsedTime)][CC>0]
hf.dt[,(c(lapply(.SD,sum,na.rm=T),
CC=sum(Cancelled==1),CanTime=lapply(.SD[Diverted==1],sum,na.rm=T))),
by=.(FlightNum),
.SDcols=c("ActualElapsedTime","TaxiIn")][order(desc(CC),
ActualElapsedTime)][CC>0]
### Step4 Odds Exponential
(a<-exp(coef(logit)))
### P-value
a["Balance"]/(a["Balance"]+1)
### P-value
pval < c()
### P-value
pval <- c()
for( i in colnames(a)){
pval[i] < (a[i]/(a[i]+1))
}
pval
pval <- c()
for( i in colnames(a)){
pval[i] < (a[i]/(a[i]+1))
}
pval
### P-value
pval <- NULL
for( i in colnames(a)){
pval[i] < (a[i]/(a[i]+1))
}
pval
for( i in colnames(a)){
pval[i] <- (a[i]/(a[i]+1))
}
pval
### Step4 Odds Exponential
(a<-exp(coef(logit)))
pval <- NULL
for( i in colnames(a)){
pval[i] <- (a[[i]]/(a[[i]]+1))
}
pval
for( i in names(a)){
pval[i] <- (a[[i]]/(a[[i]]+1))
}
pval
temp.df<- data.frame(Odds = a,Prob = pval)
View(temp.df)
### Step3 Explore the summary table
summary(logit)
library(caret)
confusionMatrix(dev$Target[1:1000,g1])
confusionMatrix(dev$Target[1:1000],g1)
head(p1)
head(p1,15)
table(Actual=dev$Target[1:1000],Predicted = g1)
confusionMatrix(dev$Target[1:1000],g1)
g1 <- floor(p1+0.3)
confusionMatrix(dev$Target[1:1000],g1)
sum(dev$Target[1:1000]==0)
sum(dev$Target[1:1000]==1)
install.packages("Deducer")
library("Deducer")
library("ROCR")
install.packages("ROCR")
library("ROCR")
ROCR::.performance.auc(logit)
library(caTools)
split.con <- sample.split(dev$Target[1:1000],SplitRatio = 0.7)
head(split.con)
set.seed(100)
train <- dev$Target[split.con]
train <- dev[split.con,]
test <- dev[!split.con,]
dim(train)
split.con <- sample.split(dev$Target,SplitRatio = 0.7)
train <- dev[split.con,]
test <- dev[!split.con,]
dim(train)
dim(test)
log <- glm(Target ~.,data=train[1:1000,-1],family="binomial")
log10(10)
pred.tra <- predict(log,newdata=train[1:1000,-1],type="response")
pred.cla <- floor(pred.tra+0.5)
confusionMatrix(train$Target[1:1000],pred.cla)
confusionMatrix(pred.cla,train$Target[1:1000])
pred.test <- predict(log,newdata=test[1:1000,-1],type="response")
pred.test.cla <- floor(pred.test+0.5)
confusionMatrix(pred.test.cla,test$Target[1:1000])
(91.3-92.1)/91.3
(92.1-91.3)/91.3
source('~/.active-rstudio-document', echo=TRUE)
rm(list=ls())
### Including Libraries
library(data.table)
library(magrittr) # for the %>%(pipe) operator
suppressPackageStartupMessages(library(ggplot2)) # Visualization
library(lubridate)
### Reading the data
USvid <- fread("USVideos.csv")
### Pre processing
USvid[,c("title") := NULL]
setwd("C:/Users/JPA System/Downloads/youtube-new")
### Reading the data
USvid <- fread("C:/Users/JPA System/Downloads/youtube-new/USVideos.csv")
### Pre processing
USvid[,c("title") := NULL]
names(Usvid)
names(USvid)
USvid[,.(comment_count,views,likes,dislikes)] %>% cor() %>%
corrplot::corrplot(method="ellipse",type = "lower")
